@page "/"
@using InsecureChat
@using InsecureChat.Managers
@using InsecureChat.Packets
@model InsecureChat.Pages.Index

@{
    Layout = null;
}

<!DOCTYPE html>

<html lang="en">
<head>
    <title>InsecureChat</title>
</head>
<body>
<div>

</div>
</body>

<script>
    let username = null;
    do {
        username = prompt("Please enter a username");
    } while(username === null);
    
    let registered = false;
    let clientId = -1;

    const ws = new WebSocket("ws://localhost:5056/ws");
    ws.binaryType = "arraybuffer";
    
    ws.onopen = () => {
        ws.send(createPacket(types.@nameof(PacketType.Client_Hello)));
    }
    
    ws.addEventListener("message", function (event) {
        if(event.data instanceof ArrayBuffer) {
            const reader = new DataView(event.data);
            processPacket(reader);
        }
    });
    
    ws.onerror = (e) => {
        console.error(e)
    }
    
    ws.onclose = (e) => {
        console.error(`disconnected: "${e.reason}" (${e.code})`);
    }
    
    const usernames = [];
    
    const types = {}
    
    // JavaScript has forced my hand. I've finally lost it.
    @{
        string typeDeclaration = "";
        @foreach(PacketType type in Enum.GetValues<PacketType>()) {
            // generates JS: `types.Client_Hello = 1;\n`
            typeDeclaration += $"types.{type.ToString()} = {(int)type};\n";
        }
    }
    @Html.Raw(typeDeclaration)
    
    console.log(types);
    
    /**
    * @@param {!number} type
    * @@param {?Uint8Array} data
    */
    function createPacket(type, data) {
        if (data === undefined || data === null) {
            data = new Uint8Array(0);
        }
        
        const byteArray = new Uint8Array(3 + data.length)
        const length = data.length;
       
        byteArray[0] = type;
        
        byteArray[1] = length & 0xFF;
        byteArray[2] = (length>>8) & 0xFF;
        
        let i = 0;
        for(let byte of data) {
            byteArray[3 + i] = byte;
            i++;
        }
        
        return byteArray;
    }
    
    function getBytes(string) {
        return Uint8Array.from(Array.from(string).map(letter => letter.charCodeAt(0)));
    }
    
    DataView.prototype.getString = function(index) {
        const length = this.getUint8(index);
        let str = "";
        
        for(let i = 0; i < length; i++) {
            const char = this.getUint8(index + i + 1);
            str += String.fromCharCode(char);
        }
        
        return str;
    }
    
    /**
    * @@param {DataView} reader
    */
    function processPacket(reader) {
        const typeIndex = reader.getUint8(0);
        const length = reader.getUint16(1);
        
        const type = Object.keys(types)[typeIndex];
        
        console.log("Got packet " + type);
        
        switch (type) {
            case "@nameof(PacketType.Server_Hello)": {
                console.log("server said hello, we handshaked properly!");
                ws.send(createPacket(types.@nameof(PacketType.Client_Register), getBytes(username)));
                break;
            }
            case "@nameof(PacketType.Server_ClientJoined)": {
                const joinedId = reader.getInt32(3, true);
                const joinedName = reader.getString(7); 
                
                if (!registered) {
                    clientId = joinedId;
                    username = joinedName;
                    
                    registered = true;
                    console.log(clientId, username);
                } else {
                    usernames[joinedId] = joinedName;
                }
                break;
            }
            case "@nameof(PacketType.Server_SendMessage)": {
                const messageSender = reader.getInt32(3, true);
                const messageText = reader.getString(7);
                
                const element = document.createElement('p');
                element.innerText = `<${usernames[messageSender]}> ${messageText}`;
                document.body.appendChild(element);
                break;
            }
        }
    }
</script>

</html>